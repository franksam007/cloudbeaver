enum AuthCredentialEncryption {
    none,
    plain,
    hash
}

type AuthCredentialInfo {
    id: ID!
    displayName: String!
    description: String

    # This field must be shown in admin panel
    admin: Boolean
    # This field must be shown in login form
    user: Boolean
    # This field can be used as user identifier

    identifying: Boolean
    possibleValues: [String]
    encryption: AuthCredentialEncryption
}

type AuthProviderInfo {
    id: ID!
    label: String!
    icon: ID
    description: String

    defaultProvider: Boolean

    #configurationParameters: [ObjectPropertyInfo]!

    credentialParameters: [AuthCredentialInfo!]!
}

type UserAuthToken {
    # Auth provider used for autgorization
    authProvider: ID!

    # Authorization time
    loginTime: DateTime!

    # User identity (aka user name) specific to auth provider
    userId: String!

    # User display name specific to auth provider
    displayName: String!

    # Optional login message
    message: String

    # Auth origin
    origin: ObjectOrigin!
}

type UserInfo {
    # User unique identifier
    userId: ID!

    # Human readable display name. It is taken from the first auth provider which was used for user login.
    displayName: String

    authTokens: [UserAuthToken!]!

    linkedAuthProviders: [String!]!
}

extend type Query {

    # Authorize user using specified auth provider. If linkUser=true then associates new
    authLogin(provider: ID!, credentials: Object!, linkUser: Boolean): UserAuthToken!

    # Logouts user. If provider not specified then all authorizations are revoked from session.
    authLogout(provider: ID): Boolean

    # Active user information. null is no user was authorized within session
    activeUser: UserInfo

    authProviders: [AuthProviderInfo!]!

    authChangeLocalPassword(oldPassword: String!, newPassword: String!): Boolean!

}
